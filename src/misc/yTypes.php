<?php declare(strict_types=1);
namespace YeAPF;
/**
 * This file is generated by 'yGenerateBasicTypes.php'
 */

class BasicTypes {
	private static $basicTypes = [];
	public static function startup() {
		self::$basicTypes = [
			'STRING' => [
				'type' => 'STRING',
				'length' => 256,
				'regExpression' => '/^[^\p{C}]*$/',
				'tag' => ';;',
			],

			'SHORT' => [
				'type' => 'INTEGER',
				'minValue' => -32767,
				'maxValue' => 32767,
				'regExpression' => '/^([0-9]+$)/',
				'tag' => ';;',
			],

			'UNSIGNEDSHORT' => [
				'type' => 'INTEGER',
				'maxValue' => 65535,
				'regExpression' => '/^([0-9]+$)/',
				'tag' => ';;',
			],

			'LONG' => [
				'type' => 'INTEGER',
				'minValue' => -2147483647,
				'maxValue' => 2147483647,
				'regExpression' => '/^([0-9]+$)/',
				'tag' => ';;',
			],

			'UNSIGNEDLONG' => [
				'type' => 'INTEGER',
				'maxValue' => 4294967295,
				'regExpression' => '/^([0-9]+$)/',
				'tag' => ';;',
			],

			'FLOAT' => [
				'type' => 'FLOAT',
				'length' => 16,
				'decimals' => 2,
				'regExpression' => '/^([0-9]+)\.([0-9]+)$/',
				'tag' => ';;',
			],

			'DATE' => [
				'type' => 'DATE',
				'length' => 10,
				'regExpression' => '/^(([12]\d{3})-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))/',
				'tag' => ';;',
			],

			'TIME' => [
				'type' => 'TIME',
				'length' => 8,
				'regExpression' => '/^([0-2]{1}[0-9]{1}):([0-5]{1}[0-9]{1}):([0-5]{1}[0-9]{1})[Z]{0,}$/',
				'tag' => ';;',
			],

			'DATETIME' => [
				'type' => 'DATETIME',
				'length' => 19,
				'regExpression' => '/^(([12]\d{3})-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))[ T]{1}([0-2]{1}[0-9]{1}):([0-5]{1}[0-9]{1}):([0-5]{1}[0-9]{1})[Z]{0,}$/',
				'tag' => ';;',
			],

			'JSON' => [
				'type' => 'JSON',
				'regExpression' => '/^[\{\[].*[\}\]]$/',
				'tag' => ';;',
			],

			'BOOLEAN' => [
				'type' => 'BOOLEAN',
				'regExpression' => '/^(true|false)$/i',
				'tag' => ';;',
			],

			'EMAIL' => [
				'type' => 'STRING',
				'length' => 256,
				'regExpression' => '/^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/',
				'tag' => ';;',
			],

			'ID' => [
				'type' => 'STRING',
				'length' => 48,
				'regExpression' => '/^([0-9a-zA-Z_\-\.]+)$/',
				'tag' => ';;',
			],

			'CNPJ' => [
				'type' => 'STRING',
				'length' => 14,
				'regExpression' => '/^[^\p{C}]*$/',
				'sedInputExpression' => '/[^0-9]//',
				'sedOutputExpression' => '/(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})/$1.$2.$3\/$4-$5/',
				'tag' => ';;',
			],

			'CPF' => [
				'type' => 'STRING',
				'length' => 11,
				'regExpression' => '/^[^\p{C}]*$/',
				'sedOutputExpression' => '/(\d{3})(\d{3})(\d{3})(\d{2})/$1.$2.$3-$4/',
				'tag' => ';;',
			],

		];
	}
	public static function get($keyName) {
		return self::$basicTypes[$keyName]??null;
	}
	public static function list() {
		return array_keys(self::$basicTypes);
	}
	public static function set($keyName, $definition) {
		self::$basicTypes[mb_strtoupper($keyName)] = $definition;
	}
}
BasicTypes::startup();
